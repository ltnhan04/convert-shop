@model convert_shop.Models.Product

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_AdminLayout.cshtml";
}

<div class="wrapper px-4 py-3">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="content-wrapper">
            <div class="d-flex align-items-center justify-content-between mb-3">
                <h2 class="text-primary"><i class="fas fa-edit"></i> Edit Product</h2>
                <a href="@Url.Action("Index")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to List
                </a>
            </div>

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.product_id)

        <div class="row g-3">
            <div class="col-md-6">
                <label class="form-label fw-bold">Product Name</label>
                @Html.EditorFor(model => model.product_name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.product_name, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-6">
                <label class="form-label">Slug</label>
                @Html.TextBoxFor(model => model.slug, new { @class = "form-control", placeholder = "Auto-generated slug", id = "slug", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.slug, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Description</label>
                @Html.TextAreaFor(model => model.product_description, new { @class = "form-control", rows = 4, placeholder = "Enter product description", @id = "product_description" })
                @Html.ValidationMessageFor(model => model.product_description, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Price</label>
                @Html.EditorFor(model => model.product_price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.product_price, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Quantity</label>
                @Html.EditorFor(model => model.quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.quantity, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Category</label>
                @Html.DropDownList("category_id", null, htmlAttributes: new { @class = "form-select" })
                @Html.ValidationMessageFor(model => model.category_id, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Color</label>
                @Html.DropDownList("color_id", null, htmlAttributes: new { @class = "form-select" })
                @Html.ValidationMessageFor(model => model.color_id, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Image</label>
                @Html.DropDownList("image_id", null, htmlAttributes: new { @class = "form-select" })
                @Html.ValidationMessageFor(model => model.image_id, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-6">
                <label class="form-label fw-bold">Status</label>
                @Html.DropDownList("status_id", null, htmlAttributes: new { @class = "form-select" })
                @Html.ValidationMessageFor(model => model.status_id, "", new { @class = "text-danger" })
            </div>

            <div class="col-12 text-end mt-3">
                <button type="submit" class="btn btn-primary px-4">
                    <i class="fas fa-save"></i> Save
                </button>
            </div>
        </div>
        </div>
    }
    <script src="https://cdn.ckeditor.com/4.21.0/standard/ckeditor.js"></script>
    <script>
    CKEDITOR.replace('product_description');
    </script>
    <script>
    function generateSlug(str) {
        return str
            .toLowerCase()
            .trim()
            .replace(/á|à|ả|ã|ạ|ă|ắ|ằ|ẳ|ẵ|ặ|â|ấ|ầ|ẩ|ẫ|ậ/g, "a")
            .replace(/é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ/g, "e")
            .replace(/i|í|ì|ỉ|ĩ|ị/g, "i")
            .replace(/ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ/g, "o")
            .replace(/ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự/g, "u")
            .replace(/ý|ỳ|ỷ|ỹ|ỵ/g, "y")
            .replace(/đ/g, "d")
            .replace(/[^a-z0-9 -]/g, "")
            .replace(/\s+/g, "-")
            .replace(/-+/g, "-");
    }

    document.addEventListener("DOMContentLoaded", function () {
        const productNameInput = document.getElementById("product_name");
        const slugInput = document.getElementById("slug");

        if (productNameInput && slugInput) {
            productNameInput.addEventListener("input", function () {
                slugInput.value = generateSlug(this.value);
            });
        }
    });
    </script>
</div>
